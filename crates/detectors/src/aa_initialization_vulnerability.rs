use anyhow::Result;
use std::any::Any;

use crate::detector::{Detector, DetectorCategory, BaseDetector};
use crate::types::{DetectorId, Finding, AnalysisContext, Severity};

/// Detector for missing signature verification in EIP-7702 initialization
pub struct AaInitializationVulnerabilityDetector {
    base: BaseDetector,
}

impl AaInitializationVulnerabilityDetector {
    pub fn new() -> Self {
        Self {
            base: BaseDetector::new(
                DetectorId("aa-initialization-vulnerability".to_string()),
                "Account Abstraction Initialization Vulnerability".to_string(),
                "Detects missing signature verification in EIP-7702 initialization and account abstraction setup that allows unauthorized initialization".to_string(),
                vec![DetectorCategory::AccessControl, DetectorCategory::Validation],
                Severity::High,
            ),
        }
    }
}

impl Detector for AaInitializationVulnerabilityDetector {
    fn id(&self) -> DetectorId {
        self.base.id.clone()
    }

    fn name(&self) -> &str {
        &self.base.name
    }

    fn description(&self) -> &str {
        &self.base.description
    }

    fn default_severity(&self) -> Severity {
        self.base.default_severity
    }

    fn categories(&self) -> Vec<DetectorCategory> {
        self.base.categories.clone()
    }

    fn is_enabled(&self) -> bool {
        self.base.enabled
    }

    fn detect(&self, ctx: &AnalysisContext<'_>) -> Result<Vec<Finding>> {
        let mut findings = Vec::new();
        let contract_source = ctx.source_code.as_str();

        // Check for account abstraction or EIP-7702 patterns
        if !self.is_aa_contract(contract_source) {
            return Ok(findings);
        }

        // Pattern 1: Initialization without signature verification
        if let Some(init_issues) = self.check_initialization_signature(contract_source) {
            for (line, issue) in init_issues {
                let message = format!(
                    "Account abstraction initialization lacks signature verification. {} \
                    Missing signature verification allows anyone to initialize the account with arbitrary parameters, leading to account takeover.",
                    issue
                );

                let finding = self.base.create_finding(
                    ctx,
                    message,
                    line,
                    0,
                    40,
                )
                .with_cwe(306) // CWE-306: Missing Authentication for Critical Function
                .with_cwe(665) // CWE-665: Improper Initialization
                .with_fix_suggestion(
                    "Implement secure initialization: \
                    (1) Add initWithSig function requiring user signature, \
                    (2) Verify signature matches expected owner, \
                    (3) Use nonce to prevent replay attacks, \
                    (4) Implement one-time initialization flag, \
                    (5) Consider ERC-4337 EntryPoint-only initialization."
                        .to_string(),
                );

                findings.push(finding);
            }
        }

        // Pattern 2: Missing initialization lock
        if let Some(lock_issues) = self.check_initialization_lock(contract_source) {
            for (line, issue) in lock_issues {
                let message = format!(
                    "Initialization function missing one-time lock. {} \
                    Reinitialization vulnerability allows attacker to reset account parameters and potentially gain control.",
                    issue
                );

                let finding = self.base.create_finding(
                    ctx,
                    message,
                    line,
                    0,
                    40,
                )
                .with_cwe(665) // CWE-665: Improper Initialization
                .with_cwe(362) // CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization
                .with_fix_suggestion(
                    "Add initialization protection: \
                    (1) Use initialized boolean flag, \
                    (2) Require !initialized in init function, \
                    (3) Set initialized = true after setup, \
                    (4) Consider OpenZeppelin's Initializable, \
                    (5) Use initializer modifier pattern."
                        .to_string(),
                );

                findings.push(finding);
            }
        }

        // Pattern 3: EntryPoint-only initialization bypass
        if let Some(entrypoint_issues) = self.check_entrypoint_initialization(contract_source) {
            for (line, issue) in entrypoint_issues {
                let message = format!(
                    "EIP-7702 initialization bypasses EntryPoint validation. {} \
                    Direct initialization without EntryPoint validation breaks ERC-4337 security model and allows unauthorized setup.",
                    issue
                );

                let finding = self.base.create_finding(
                    ctx,
                    message,
                    line,
                    0,
                    40,
                )
                .with_cwe(284) // CWE-284: Improper Access Control
                .with_cwe(863) // CWE-863: Incorrect Authorization
                .with_fix_suggestion(
                    "Enforce EntryPoint initialization: \
                    (1) Require msg.sender == entryPoint in init, \
                    (2) Validate initialization via validateUserOp, \
                    (3) Use onlyEntryPoint modifier, \
                    (4) Document initialization flow, \
                    (5) Follow ERC-4337 specification."
                        .to_string(),
                );

                findings.push(finding);
            }
        }

        // Pattern 4: Missing owner validation
        if let Some(owner_issues) = self.check_owner_validation(contract_source) {
            for (line, issue) in owner_issues {
                let message = format!(
                    "Initialization sets owner without validation. {} \
                    Unvalidated owner parameter allows initialization with attacker-controlled address.",
                    issue
                );

                let finding = self.base.create_finding(
                    ctx,
                    message,
                    line,
                    0,
                    40,
                )
                .with_cwe(20)  // CWE-20: Improper Input Validation
                .with_cwe(639) // CWE-639: Authorization Bypass Through User-Controlled Key
                .with_fix_suggestion(
                    "Validate owner parameter: \
                    (1) Require owner != address(0), \
                    (2) Verify signature from owner address, \
                    (3) Emit OwnerSet event, \
                    (4) Consider two-step ownership transfer, \
                    (5) Validate owner in constructor or initWithSig."
                        .to_string(),
                );

                findings.push(finding);
            }
        }

        // Pattern 5: Delegate initialization without verification
        if let Some(delegate_issues) = self.check_delegate_initialization(contract_source) {
            for (line, issue) in delegate_issues {
                let message = format!(
                    "EIP-7702 delegation initialized without safety checks. {} \
                    Unsafe delegation initialization can brick the account if delegating to incompatible or malicious contract.",
                    issue
                );

                let finding = self.base.create_finding(
                    ctx,
                    message,
                    line,
                    0,
                    40,
                )
                .with_cwe(20)  // CWE-20: Improper Input Validation
                .with_cwe(913) // CWE-913: Improper Control of Dynamically-Managed Code Resources
                .with_fix_suggestion(
                    "Validate delegation target: \
                    (1) Verify delegate implements required interfaces, \
                    (2) Ensure delegate is not zero address, \
                    (3) Check delegate has valid code, \
                    (4) Require signature for delegation setup, \
                    (5) Follow EIP-7702 security guidelines."
                        .to_string(),
                );

                findings.push(finding);
            }
        }

        Ok(findings)
    }

    fn as_any(&self) -> &dyn Any {
        self
    }
}

impl AaInitializationVulnerabilityDetector {
    fn is_aa_contract(&self, source: &str) -> bool {
        source.contains("initialize(") ||
        source.contains("init(") ||
        source.contains("setup(") ||
        source.contains("EIP-7702") ||
        source.contains("delegation") ||
        source.contains("validateUserOp") ||
        source.contains("IAccount")
    }

    fn check_initialization_signature(&self, source: &str) -> Option<Vec<(u32, String)>> {
        let lines: Vec<&str> = source.lines().collect();
        let mut issues = Vec::new();

        for (idx, line) in lines.iter().enumerate() {
            let trimmed = line.trim();

            // Look for init functions
            if (trimmed.contains("function initialize") ||
                trimmed.contains("function init") ||
                trimmed.contains("function setup")) &&
               !trimmed.contains("internal") &&
               !trimmed.contains("private") {

                // Check function signature for signature parameter
                let func_declaration = self.get_function_declaration(&lines, idx);

                if !func_declaration.contains("signature") &&
                   !func_declaration.contains("bytes memory sig") &&
                   !func_declaration.contains("bytes calldata sig") {

                    // Check function body for signature verification
                    let func_body = self.get_function_body(&lines, idx);

                    if !func_body.contains("ecrecover") &&
                       !func_body.contains("SignatureChecker") &&
                       !func_body.contains("ECDSA.recover") {
                        issues.push((
                            (idx + 1) as u32,
                            "Initialization function lacks signature verification".to_string()
                        ));
                    }
                }
            }
        }

        if issues.is_empty() { None } else { Some(issues) }
    }

    fn check_initialization_lock(&self, source: &str) -> Option<Vec<(u32, String)>> {
        let lines: Vec<&str> = source.lines().collect();
        let mut issues = Vec::new();

        for (idx, line) in lines.iter().enumerate() {
            let trimmed = line.trim();

            if (trimmed.contains("function initialize") ||
                trimmed.contains("function init") ||
                trimmed.contains("function setup")) &&
               !trimmed.contains("internal") &&
               !trimmed.contains("private") {

                let func_body = self.get_function_body(&lines, idx);

                // Check for initialization guard
                let has_guard = func_body.contains("initialized") ||
                               func_body.contains("Initializable") ||
                               func_body.contains("initializer") ||
                               func_body.contains("require(!_initialized");

                if !has_guard {
                    issues.push((
                        (idx + 1) as u32,
                        "Initialization function missing one-time execution guard".to_string()
                    ));
                }
            }
        }

        if issues.is_empty() { None } else { Some(issues) }
    }

    fn check_entrypoint_initialization(&self, source: &str) -> Option<Vec<(u32, String)>> {
        let lines: Vec<&str> = source.lines().collect();
        let mut issues = Vec::new();

        // Only check if this is an ERC-4337 contract
        if !source.contains("EntryPoint") && !source.contains("validateUserOp") {
            return None;
        }

        for (idx, line) in lines.iter().enumerate() {
            let trimmed = line.trim();

            if (trimmed.contains("function initialize") ||
                trimmed.contains("function init")) &&
               !trimmed.contains("internal") {

                let func_body = self.get_function_body(&lines, idx);

                // Check for EntryPoint validation
                let has_entrypoint_check = func_body.contains("msg.sender == entryPoint") ||
                                          func_body.contains("onlyEntryPoint") ||
                                          func_body.contains("require(msg.sender == _entryPoint");

                if !has_entrypoint_check {
                    issues.push((
                        (idx + 1) as u32,
                        "ERC-4337 initialization bypasses EntryPoint validation".to_string()
                    ));
                }
            }
        }

        if issues.is_empty() { None } else { Some(issues) }
    }

    fn check_owner_validation(&self, source: &str) -> Option<Vec<(u32, String)>> {
        let lines: Vec<&str> = source.lines().collect();
        let mut issues = Vec::new();

        for (idx, line) in lines.iter().enumerate() {
            let trimmed = line.trim();

            if trimmed.contains("owner =") && !trimmed.contains("//") {
                // Check if there's validation
                let context_before = lines[idx.saturating_sub(2)..idx].join(" ");
                let context_after = lines[idx..=idx.saturating_add(2).min(lines.len()-1)].join(" ");
                let context = format!("{} {}", context_before, context_after);

                let has_validation = context.contains("require(") ||
                                    context.contains("!= address(0)") ||
                                    context.contains("revert") ||
                                    context.contains("ecrecover");

                if !has_validation && trimmed.contains("owner =") {
                    issues.push((
                        (idx + 1) as u32,
                        "Owner assignment without address(0) check or signature verification".to_string()
                    ));
                }
            }
        }

        if issues.is_empty() { None } else { Some(issues) }
    }

    fn check_delegate_initialization(&self, source: &str) -> Option<Vec<(u32, String)>> {
        let lines: Vec<&str> = source.lines().collect();
        let mut issues = Vec::new();

        for (idx, line) in lines.iter().enumerate() {
            let trimmed = line.trim();

            // Look for delegation patterns (EIP-7702)
            if (trimmed.contains("delegatecall") || trimmed.contains("delegate =")) &&
               !trimmed.contains("//") {

                // Check for validation
                let context = self.get_surrounding_context(&lines, idx, 3);

                let has_validation = context.contains("require(") ||
                                    context.contains("!= address(0)") ||
                                    context.contains("isContract") ||
                                    context.contains("supportsInterface");

                if !has_validation {
                    issues.push((
                        (idx + 1) as u32,
                        "Delegation without validation of target contract".to_string()
                    ));
                }
            }
        }

        if issues.is_empty() { None } else { Some(issues) }
    }

    fn get_function_declaration(&self, lines: &[&str], start_idx: usize) -> String {
        let mut declaration = String::new();
        for line in lines.iter().skip(start_idx).take(5) {
            declaration.push_str(line);
            if line.contains("{") {
                break;
            }
        }
        declaration
    }

    fn get_function_body(&self, lines: &[&str], start_idx: usize) -> String {
        let mut body = Vec::new();
        let mut brace_count = 0;
        let mut started = false;

        for line in lines.iter().skip(start_idx) {
            if line.contains("{") {
                started = true;
                brace_count += line.matches('{').count() as i32;
            }
            if started {
                body.push(*line);
                brace_count -= line.matches('}').count() as i32;
                if brace_count <= 0 {
                    break;
                }
            }
        }

        body.join("\n")
    }

    fn get_surrounding_context(&self, lines: &[&str], idx: usize, range: usize) -> String {
        let start = idx.saturating_sub(range);
        let end = (idx + range).min(lines.len());
        lines[start..end].join(" ")
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_detector_properties() {
        let detector = AaInitializationVulnerabilityDetector::new();
        assert_eq!(detector.name(), "Account Abstraction Initialization Vulnerability");
        assert_eq!(detector.default_severity(), Severity::High);
        assert!(detector.is_enabled());
    }
}
